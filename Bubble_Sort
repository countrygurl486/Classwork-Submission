
public class Bubble_Sort {

	public static void main(String[] args) 
	{
		
		int [] randomNumbers = makeRandom();
		
		printArr(randomNumbers);
		
		bubbleSort(randomNumbers);
		
		printArr(randomNumbers);
	}
		
	
	
	private static void bubbleSort(int[] arr)
	{
	//the outer for loop runs through the entire length of the array
		for(int j = 0; j < arr.length-1;j++)
		{
			//the inner loop sorts through the array
			for(int i = 0; i < arr.length-1; i ++)
			{
				//this if statement swaps the numbers so that it sorts in numerical order
				if(arr[i] > arr[i+1]) 
				{
					
					int temp = arr[i];
					arr[i] = arr[i+1];
					arr[i+1] = temp;
				}
				
			}
			
		}
		//this prints out the sorted array
		System.out.println("This is the sorted array:");
	
	}
/**
 * We first create a method that makes a random number. It does this by multiplying the starting 
 * number by 1000 and adds 1 to it and keeps going until it reaches the length of 2000 elements
 * @return bigNums
 */
	private static int[] makeRandom() 
		{
			//declare an new array with the length of 2000
			int[] bigNums = new int[2000];
			//declares an int that equals the length
			int len = bigNums.length;
			
			//create a for loop that changes the number every time
			for (int i = 0; i < len; i++)
			{
				//this multiplies the number and adds 1 to it
				int randomNumber = (int) ((Math.random() * 1000) + 1);
				
				//this changes the original number to the random number
				bigNums[i] = randomNumber;
				int [] randomNumbers = bigNums;
			}
			
			//returns our desired outcome
			return bigNums;
			
		}
	
	public static void printArr(int[] arr)
	{
		//Task 1: make a variable to be the 'traverser'
		int traverser;
		//Task 2: make a loop. we want it to traverse every character, so it should go
		//from start to finish of the loop
		for(traverser = 0; traverser <= arr.length -1; traverser++)
		{
			//Task 3: prove that it can count along with right amount of indeces
			System.out.println(arr[traverser]);
			//Task 4: change Task 3 to print each element instead of each index 
		}
	
	}
}

