
public class TwoDArray {

	public static void main(String[] args) {
	/**
	 * Task 1: Create a method print2DArray() that is passed a 2D String array and will print out each element in row-major order 
	 * (instead of column-major order like we did yesterday). 
	 * 
	 * Task 2: Create a method allOnes2D() that is passed a 2D double array, 
	 * makes an array of the same column and row length but all its literals are 0.0 called copyArr, 
	 * and then changes each element inside to 1.0 and returns copyArr. (So it is passed a 2D array and returns a 2D array with all 0.0).
	 */
		
		String [][] fruit =
			{{"mango", "watermelon", "grapes", "cantaloupe", "lime"},
			{"mango", "watermelon", "grapes", "cantaloupe", "lime"},
			{"mango", "watermelon", "grapes", "cantaloupe", "lime"},
			{"mango", "watermelon", "grapes", "cantaloupe", "lime"},
			{"mango", "watermelon", "grapes", "cantaloupe", "lime"},
			{"mango", "watermelon", "grapes", "cantaloupe", "lime"},
			{"mango", "watermelon", "grapes", "cantaloupe", "lime"}};
		
		double[] [] copyArr = 
			{{0.0,0.0,0.0,0.0},
			{0.0,0.0,0.0,0.0},
			{0.0,0.0,0.0,0.0}};
		
		
		print2DArray(fruit);
		allOnes2D(copyArr);

	}
	
	private static void print2DArray(String [] [] fruit)
	{
		for(int i = 0; i < fruit[0].length; i++) 
		{
			for(int j = 0; j < fruit.length; j++)
			{
				System.out.println(fruit[j][i]);
			}
		}
	}
	
	private static void print2DArray(double [] [] fruit)
	{
		for(int i = 0; i < fruit[0].length; i++) 
		{
			for(int j = 0; j < fruit.length; j++)
			{
				System.out.println(fruit[j][i]);
			}
		}
	}

	private static void allOnes2D(double[][] copyArr)
	{
		for(int i = 0; i < copyArr[0].length; i++) 
		{
			for(int j = 0; j < copyArr.length; j++)
			{
			copyArr[j][i] = 1.0;
			}
			
		}
		print2DArray(copyArr);
	}

}
	
